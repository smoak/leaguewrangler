{"version":3,"sources":["support/theme.ts","data/domains/session/selectors.ts","graphql/queries/getCurrentUserEvents.ts","graphql/types/globalTypes.ts","components/EventActions/NotPlayingButton.tsx","components/EventActions/PlayingButton.tsx","components/EventActions/TentativeButton.tsx","graphql/mutations/saveRsvp.ts","components/EventActions/EventActions.tsx","components/EventActions/hooks.ts","components/Event/Event.tsx","components/Event/styles.ts","components/SkeletonEvent/SkeletonEvent.tsx","components/SkeletonEvent/styles.ts","components/EventList/EventList.tsx","components/PageHome/PageHome.tsx","components/Routes/Routes.tsx","components/AppBody/AppBody.tsx","graphql/queries/getUserAvatar.ts","components/UserAvatar/UserAvatar.tsx","components/AppHeader/AppHeader.tsx","graphql/mutations/createUserToken.ts","components/Login/Form/SignInButton.tsx","components/Login/Form/hooks.ts","components/Login/Form/Form.tsx","support/auth/auth.ts","components/Login/Login.tsx","components/Login/styles.ts","components/App/App.tsx","components/App/AppContainer.ts","data/state/session/reducer.ts","data/store/createStore.ts","registerServiceWorker.ts","index.tsx","data/domains/sessionSetUserToken/actions.ts"],"names":["createMuiTheme","palette","primary","deepPurple","secondary","purple","typography","useNextVariants","isAuthenticated","state","session","userToken","gql","RsvpStatus","NotPlayingButton","className","isNotPlaying","onRsvp","rsvpCallback","useCallback","NO","icon","color","aria-label","onClick","PlayingButton","isPlaying","YES","TentativeButton","isTentative","MAYBE","styles","createStyles","fontSize","withStyles","classes","eventId","teamId","rsvpStatus","useMutation","saveEventRsvp","saveRsvp","loading","saveRsvpCallback","variables","useSaveRsvpMutation","card","width","location","startTime","teamPhotoUrl","title","subheader","format","date","avatar","src","component","maxWidth","skeletonTitle","Skeleton","height","skeletonSubheader","variant","notEmpty","value","undefined","EventList","useQuery","getCurrentUserEvents","data","error","events","currentUser","filter","length","map","e","key","id","team","photoThumbnailUrl","name","startTimestamp","Date","viewerRsvpStatus","theme","main","display","justifyContent","alignItems","marginTop","spacing","unit","Routes","exact","path","PageHome","AppBody","margin","getUserAvatarQuery","profilePhotoThumbnailUrl","menuButton","marginLeft","marginRight","grow","flexGrow","position","process","SignInButton","isDisabled","type","fullWidth","preventDefault","disabled","useControlledInput","defaultValue","useState","setValue","onChange","target","Form","token","submitButtonClassname","formClassname","username","onUsernameChange","password","onPasswordChange","CREATE_USER_TOKEN","createUserToken","onSignInClicked","localStorage","setItem","window","reload","button","required","htmlFor","autoComplete","autoFocus","control","label","breakpoints","up","paper","flexDirection","padding","backgroundColor","form","submit","App","connect","initialState","reducer","action","payload","createEnhancedStore","rootReducer","combineReducers","reducers","enhancer","composeWithDevTools","createStore","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","store","getItem","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","dispatch","ReactDOM","render","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e6e66c6d.chunk.js","sourcesContent":["import deepPurple from '@material-ui/core/colors/deepPurple';\nimport purple from '@material-ui/core/colors/purple';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  palette: {\n    primary: deepPurple,\n    secondary: purple,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n","import { ApplicationState } from '../../state/types';\n\nexport type IsAuthenticated = (state: ApplicationState) => boolean;\nexport const isAuthenticated: IsAuthenticated = state => !!state.session.userToken;\n","import { gql } from 'apollo-boost';\n\nexport default gql`\n  query GetCurrentUserEvents {\n    currentUser {\n      events {\n        id: eventId\n        title\n        endTimestamp\n        startTimestamp\n        viewerRsvpStatus\n        team {\n          id: teamId\n          shortName\n          photoThumbnailUrl\n        }\n        location {\n          name\n          address\n          googleMapsUrl\n        }\n      }\n    }\n  }\n`;\n","/* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\n/**\n * The RSVP status of a user\n */\nexport enum RsvpStatus {\n  AVAILABLE = \"AVAILABLE\",\n  MAYBE = \"MAYBE\",\n  NO = \"NO\",\n  NONE = \"NONE\",\n  YES = \"YES\",\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n","import { IconButton } from '@material-ui/core';\nimport NotPlayingIcon from '@material-ui/icons/HighlightOff';\nimport RsvpedNotPlayingIcon from '@material-ui/icons/HighlightOffTwoTone';\nimport React, { FC, useCallback } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ninterface NotPlayingButtonProps {\n  readonly isNotPlaying: boolean;\n  readonly className: string;\n  onRsvp(rsvpStatus: RsvpStatus): void;\n}\n\nconst NotPlayingButton: FC<NotPlayingButtonProps> = ({ className, isNotPlaying, onRsvp }) => {\n  const rsvpCallback = useCallback(\n    () => {\n      onRsvp(RsvpStatus.NO);\n    },\n    [onRsvp]\n  );\n\n  const icon = isNotPlaying ? (\n    <RsvpedNotPlayingIcon className={className} color=\"primary\" />\n  ) : (\n    <NotPlayingIcon className={className} />\n  );\n\n  return (\n    <IconButton aria-label=\"Not Playing\" onClick={rsvpCallback}>\n      {icon}\n    </IconButton>\n  );\n};\n\nexport default NotPlayingButton;\n","import { IconButton } from '@material-ui/core';\nimport PlayingIcon from '@material-ui/icons/CheckCircleOutline';\nimport RsvpedPlayingIcon from '@material-ui/icons/CheckCircleTwoTone';\nimport React, { FC, useCallback } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ninterface PlayingButtonProps {\n  readonly isPlaying: boolean;\n  readonly className: string;\n  onRsvp(rsvpStatus: RsvpStatus): void;\n}\n\nconst PlayingButton: FC<PlayingButtonProps> = ({ isPlaying, className, onRsvp }) => {\n  const rsvpCallback = useCallback(\n    () => {\n      onRsvp(RsvpStatus.YES);\n    },\n    [onRsvp]\n  );\n  const icon = isPlaying ? (\n    <RsvpedPlayingIcon className={className} color=\"primary\" />\n  ) : (\n    <PlayingIcon className={className} />\n  );\n\n  return (\n    <IconButton aria-label=\"Playing\" onClick={rsvpCallback}>\n      {icon}\n    </IconButton>\n  );\n};\n\nexport default PlayingButton;\n","import { IconButton } from '@material-ui/core';\nimport TentativeIcon from '@material-ui/icons/HelpOutlineOutlined';\nimport RsvpedTentativeIcon from '@material-ui/icons/HelpTwoTone';\nimport React, { FC, useCallback } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ninterface TentativeButtonProps {\n  readonly isTentative: boolean;\n  readonly className: string;\n  onRsvp(rsvpStatus: RsvpStatus): void;\n}\n\nconst TentativeButton: FC<TentativeButtonProps> = ({ onRsvp, className, isTentative }) => {\n  const rsvpCallback = useCallback(\n    () => {\n      onRsvp(RsvpStatus.MAYBE);\n    },\n    [onRsvp]\n  );\n\n  const icon = isTentative ? (\n    <RsvpedTentativeIcon className={className} color=\"primary\" />\n  ) : (\n    <TentativeIcon className={className} />\n  );\n  return (\n    <IconButton aria-label=\"Tentative\" onClick={rsvpCallback}>\n      {icon}\n    </IconButton>\n  );\n};\n\nexport default TentativeButton;\n","import { gql } from 'apollo-boost';\n\nexport default gql`\n  mutation SaveEventRsvp($eventId: Int!, $rsvpStatus: RsvpStatus!, $teamId: Int!, $comments: String) {\n    saveRsvp(comments: $comments, eventId: $eventId, rsvpStatus: $rsvpStatus, teamId: $teamId) {\n      id: eventId\n      viewerRsvpStatus\n    }\n  }\n`;\n","import { CircularProgress, WithStyles, createStyles, withStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\nimport NotPlayingButton from './NotPlayingButton';\nimport PlayingButton from './PlayingButton';\nimport TentativeButton from './TentativeButton';\nimport { useSaveRsvpMutation } from './hooks';\n\ninterface OwnProps {\n  readonly eventId: number;\n  readonly rsvpStatus: RsvpStatus;\n  readonly teamId: number;\n}\n\nconst styles = createStyles({\n  icon: {\n    fontSize: 40,\n  },\n});\n\ntype EventActionsProps = WithStyles<typeof styles> & OwnProps;\n\nexport const EventActions: FC<EventActionsProps> = ({ classes, eventId, teamId, rsvpStatus }) => {\n  const { loading, saveRsvpCallback } = useSaveRsvpMutation({ teamId, eventId });\n\n  if (loading) {\n    return <CircularProgress className={classes.icon} color=\"secondary\" />;\n  }\n\n  return (\n    <>\n      <PlayingButton className={classes.icon} isPlaying={rsvpStatus === RsvpStatus.YES} onRsvp={saveRsvpCallback} />\n      <TentativeButton\n        className={classes.icon}\n        isTentative={rsvpStatus === RsvpStatus.MAYBE}\n        onRsvp={saveRsvpCallback}\n      />\n      <NotPlayingButton\n        className={classes.icon}\n        isNotPlaying={rsvpStatus === RsvpStatus.NO}\n        onRsvp={saveRsvpCallback}\n      />\n    </>\n  );\n};\n\nexport default withStyles(styles)(EventActions);\n","import { useCallback } from 'react';\nimport { useMutation } from 'react-apollo';\n\nimport saveEventRsvp from '../../graphql/mutations/saveRsvp';\nimport { SaveEventRsvp, SaveEventRsvpVariables } from '../../graphql/types/SaveEventRsvp';\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ntype SaveRsvpCallback = (rsvpStatus: RsvpStatus) => void;\n\ninterface SaveRsvpMutation {\n  readonly loading: boolean;\n  readonly saveRsvpCallback: SaveRsvpCallback;\n}\n\ninterface UseSaveRsvpMutationOptions {\n  readonly eventId: number;\n  readonly teamId: number;\n}\n\ntype UseSaveRsvpMutation = (options: UseSaveRsvpMutationOptions) => SaveRsvpMutation;\nexport const useSaveRsvpMutation: UseSaveRsvpMutation = ({ eventId, teamId }) => {\n  const [saveRsvp, { loading }] = useMutation<SaveEventRsvp, SaveEventRsvpVariables>(saveEventRsvp);\n  const saveRsvpCallback = useCallback(\n    rsvpStatus => {\n      saveRsvp({ variables: { eventId, teamId, rsvpStatus } });\n    },\n    [eventId, teamId, saveRsvp]\n  );\n\n  return {\n    loading,\n    saveRsvpCallback,\n  };\n};\n","import { Avatar, CardActions, CardContent, CardHeader, Typography, WithStyles, withStyles } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport { RsvpStatus } from 'graphql/types/globalTypes';\nimport React, { FC } from 'react';\nimport Moment from 'react-moment';\n\nimport EventActions from '../EventActions';\n\nimport styles from './styles';\n\nexport interface OwnProps {\n  readonly endTime?: Date;\n  readonly eventId: number;\n  readonly location: string;\n  readonly locationMapsUrl?: string;\n  readonly rsvpStatus: RsvpStatus;\n  readonly startTime?: Date;\n  readonly teamId: number;\n  readonly teamPhotoUrl: string | null;\n  readonly title: string;\n}\n\nexport type EventProps = WithStyles<typeof styles> & OwnProps;\n\nexport const Event: FC<EventProps> = ({\n  classes,\n  eventId,\n  location,\n  rsvpStatus,\n  startTime,\n  teamId,\n  teamPhotoUrl,\n  title,\n}) => {\n  const subheader = startTime ? <Moment format=\"LLLL\" date={startTime} /> : null;\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={<Avatar aria-label=\"teamPhoto\" src={teamPhotoUrl ? teamPhotoUrl : ''} />}\n        title={title}\n        subheader={subheader}\n      />\n      <CardContent>\n        <Typography component=\"p\">{location}</Typography>\n      </CardContent>\n      <CardActions>\n        <EventActions rsvpStatus={rsvpStatus} teamId={teamId} eventId={eventId} />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withStyles(styles)(Event);\n","import { createStyles } from '@material-ui/core/styles';\n\nexport default () =>\n  createStyles({\n    card: {\n      width: '100%',\n    },\n  });\n","import Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport { WithStyles, withStyles } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport React, { FC } from 'react';\n\nimport styles from './styles';\n\ntype SkeletonEventProps = WithStyles<typeof styles>;\n\nexport const SkeletonEvent: FC<SkeletonEventProps> = ({ classes }) => {\n  const { card } = classes;\n\n  const skeletonTitle = <Skeleton height={6} />;\n  const skeletonSubheader = <Skeleton height={6} width=\"80%\" />;\n\n  return (\n    <Card className={card}>\n      <CardHeader\n        avatar={<Skeleton variant=\"circle\" width={40} height={40} />}\n        title={skeletonTitle}\n        subheader={skeletonSubheader}\n      />\n      <CardContent>\n        <Skeleton variant=\"rect\" height={50} />\n      </CardContent>\n      <CardActions>\n        <IconButton>\n          <Skeleton variant=\"rect\" />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withStyles(styles)(SkeletonEvent);\n","import { createStyles } from '@material-ui/core/styles';\n\nexport default () =>\n  createStyles({\n    card: {\n      maxWidth: 354,\n      width: '100%',\n    },\n  });\n","import { useQuery } from '@apollo/react-hooks';\nimport { List, ListItem } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nimport getCurrentUserEvents from '../../graphql/queries/getCurrentUserEvents';\nimport { GetCurrentUserEvents } from '../../graphql/types/GetCurrentUserEvents';\nimport Event from '../Event';\nimport SkeletonEvent from '../SkeletonEvent';\n\nfunction notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined;\n}\n\nconst EventList: FC = () => {\n  const { loading, data, error } = useQuery<GetCurrentUserEvents>(getCurrentUserEvents);\n\n  if (loading) {\n    return <SkeletonEvent />;\n  }\n\n  if (error || !data) {\n    return <>Some error</>;\n  }\n\n  const { currentUser } = data;\n\n  const events = currentUser.events.filter(notEmpty);\n\n  if (events.length > 0) {\n    return (\n      <List>\n        {events.map(e => (\n          <ListItem key={e.id}>\n            <Event\n              eventId={e.id}\n              teamId={e.team.id}\n              title={e.title}\n              teamPhotoUrl={e.team.photoThumbnailUrl}\n              location={e.location ? e.location.name : ''}\n              startTime={e.startTimestamp ? new Date(e.startTimestamp * 1000) : undefined}\n              rsvpStatus={e.viewerRsvpStatus}\n            />\n          </ListItem>\n        ))}\n      </List>\n    );\n  }\n\n  return <>No events scheduled</>;\n};\n\nexport default EventList;\n","import { Theme, WithStyles, createStyles, withStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nimport EventList from '../EventList';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    main: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing.unit * 2,\n    },\n  });\n\nexport type PageHomeProps = WithStyles<typeof styles>;\n\nexport const PageHome: FC<PageHomeProps> = ({ classes }) => {\n  return (\n    <div className={classes.main}>\n      <EventList />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(PageHome);\n","import React, { FC } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport PageHome from '../PageHome';\n\nconst Routes: FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact={true} path=\"/\" component={PageHome} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","import React, { FC } from 'react';\n\nimport Routes from '../Routes';\n\nconst AppBody: FC = () => <Routes />;\n\nexport default AppBody;\n","import { gql } from 'apollo-boost';\n\nexport default gql`\n  query GetUserAvatar {\n    currentUser {\n      profilePhotoThumbnailUrl\n    }\n  }\n`;\n","import { useQuery } from '@apollo/react-hooks';\nimport { Avatar, CircularProgress, WithStyles, createStyles, withStyles } from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport getUserAvatarQuery from 'graphql/queries/getUserAvatar';\nimport { GetUserAvatar } from 'graphql/types/GetUserAvatar';\nimport React, { FC } from 'react';\n\nconst styles = createStyles({\n  avatar: {\n    margin: 10,\n  },\n});\n\nexport type UserAvatarProps = WithStyles<typeof styles>;\n\nconst UserAvatar: FC<UserAvatarProps> = ({ classes }) => {\n  const { loading, data } = useQuery<GetUserAvatar>(getUserAvatarQuery);\n\n  if (loading) {\n    return <CircularProgress color=\"secondary\" />;\n  }\n  if (data && data.currentUser) {\n    return <Avatar src={data.currentUser.profilePhotoThumbnailUrl} className={classes.avatar} />;\n  }\n  return <AccountCircle />;\n};\n\nexport default withStyles(styles)(UserAvatar);\n","import { Typography } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { WithStyles, createStyles, withStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React, { FC } from 'react';\n\nimport UserAvatar from '../UserAvatar';\n\nconst styles = createStyles({\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport const AppHeader: FC<WithStyles<typeof styles>> = ({ classes }) => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {process.env.REACT_APP_WEBSITE_NAME}\n        </Typography>\n        <UserAvatar />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default withStyles(styles)(AppHeader);\n","import { gql } from 'apollo-boost';\n\nexport default gql`\n  mutation CreateUserToken($username: String!, $password: String!) {\n    createUserToken(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n","import { Button } from '@material-ui/core';\nimport React, { FC } from 'react';\n\ninterface SignInButtonProps {\n  readonly className: string;\n  readonly isDisabled: boolean;\n  onClick(): void;\n}\n\nconst SignInButton: FC<SignInButtonProps> = ({ className, isDisabled, onClick }) => {\n  return (\n    <Button\n      type=\"submit\"\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      className={className}\n      onClick={e => {\n        e.preventDefault();\n        onClick();\n      }}\n      disabled={isDisabled}\n    >\n      Sign in\n    </Button>\n  );\n};\n\nexport default SignInButton;\n","import { useCallback, useState } from 'react';\n\nexport interface ControlledInput {\n  readonly value: string;\n  onChange: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n}\ntype UseControlledInput = (defaultValue: string) => ControlledInput;\nexport const useControlledInput: UseControlledInput = defaultValue => {\n  const [value, setValue] = useState(defaultValue);\n  const onChange = useCallback<React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>>(e => {\n    setValue(e.target.value);\n  }, []);\n\n  return {\n    value,\n    onChange,\n  };\n};\n","import { useMutation } from '@apollo/react-hooks';\nimport { Checkbox, CircularProgress, FormControl, FormControlLabel, Input, InputLabel } from '@material-ui/core';\nimport CREATE_USER_TOKEN from 'graphql/mutations/createUserToken';\nimport { CreateUserToken, CreateUserTokenVariables } from 'graphql/types/CreateUserToken';\nimport React, { FC, useCallback } from 'react';\nimport { setUserToken } from 'support/auth';\n\nimport SignInButton from './SignInButton';\nimport { useControlledInput } from './hooks';\n\nexport interface FormProps {\n  readonly formClassname: string;\n  readonly submitButtonClassname: string;\n}\n\nconst Form: FC<FormProps> = ({ submitButtonClassname, formClassname }) => {\n  const { value: username, onChange: onUsernameChange } = useControlledInput('');\n  const { value: password, onChange: onPasswordChange } = useControlledInput('');\n  const [createUserToken, { data, error, loading }] = useMutation<CreateUserToken, CreateUserTokenVariables>(\n    CREATE_USER_TOKEN\n  );\n\n  const onSignInClicked = useCallback(\n    () => {\n      createUserToken({ variables: { username, password } });\n    },\n    [createUserToken, username, password]\n  );\n\n  if (data && data.createUserToken) {\n    setUserToken(data.createUserToken.token);\n    window.location.reload();\n  }\n\n  const button = loading ? (\n    <CircularProgress color=\"secondary\" />\n  ) : (\n    <SignInButton onClick={onSignInClicked} isDisabled={!username || !password} className={submitButtonClassname} />\n  );\n\n  return (\n    <div className={formClassname}>\n      <FormControl margin=\"normal\" required fullWidth error={!!error}>\n        <InputLabel htmlFor=\"username\">Username</InputLabel>\n        <Input\n          id=\"username\"\n          name=\"username\"\n          autoComplete=\"username\"\n          autoFocus={true}\n          value={username}\n          onChange={onUsernameChange}\n        />\n      </FormControl>\n      <FormControl margin=\"normal\" required fullWidth error={!!error}>\n        <InputLabel htmlFor=\"password\">Password</InputLabel>\n        <Input\n          name=\"password\"\n          type=\"password\"\n          id=\"password\"\n          autoComplete=\"current-password\"\n          value={password}\n          onChange={onPasswordChange}\n        />\n      </FormControl>\n      <FormControlLabel control={<Checkbox value=\"remember\" color=\"primary\" />} label=\"Remember me\" />\n      {button}\n    </div>\n  );\n};\n\nexport default Form;\n","const userTokenName = 'userToken';\n\nexport type GetUserToken = () => string | null;\nexport const getUserToken: GetUserToken = () => {\n  return localStorage.getItem(userTokenName);\n};\n\nexport type SetUserToken = (token: string) => void;\nexport const setUserToken: SetUserToken = token => localStorage.setItem(userTokenName, token);\n","import { Avatar, Paper, Typography } from '@material-ui/core';\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport React, { FC } from 'react';\n\nimport Form from './Form';\nimport styles from './styles';\n\nexport const Login: FC<WithStyles<typeof styles>> = ({ classes }) => {\n  return (\n    <div className={classes.main}>\n      <Paper className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <Form formClassname={classes.form} submitButtonClassname={classes.submit} />\n      </Paper>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Login);\n","import { Theme, createStyles } from '@material-ui/core';\n\nexport default (theme: Theme) =>\n  createStyles({\n    main: {\n      width: 'auto',\n      display: 'block', // Fix IE 11 issue.\n      marginLeft: theme.spacing.unit * 3,\n      marginRight: theme.spacing.unit * 3,\n      [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\n        width: 400,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      },\n    },\n    paper: {\n      marginTop: theme.spacing.unit * 8,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\n    },\n    avatar: {\n      margin: theme.spacing.unit,\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing.unit,\n    },\n    submit: {\n      marginTop: theme.spacing.unit * 3,\n    },\n  });\n","import CssBaseline from '@material-ui/core/CssBaseline';\nimport React, { FC } from 'react';\n\nimport AppBody from '../AppBody';\nimport AppHeader from '../AppHeader';\nimport Login from '../Login';\n\nexport interface MappedStateProps {\n  readonly isAuthenticated: boolean;\n}\n\nexport type AppProps = MappedStateProps;\n\nconst App: FC<AppProps> = ({ isAuthenticated }) => {\n  return (\n    <div>\n      <CssBaseline />\n      <AppHeader />\n      {isAuthenticated ? <AppBody /> : <Login />}\n    </div>\n  );\n};\n\nexport default App;\n","import { MapStateToProps, connect } from 'react-redux';\n\nimport { isAuthenticated } from '../../data/domains/session/selectors';\nimport { ApplicationState } from '../../data/state/types';\n\nimport App, { MappedStateProps } from './App';\n\nexport const mapStateToProps: MapStateToProps<MappedStateProps, {}, ApplicationState> = state => {\n  return {\n    isAuthenticated: isAuthenticated(state),\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import { Reducer } from 'redux';\n\nimport { SessionSetUserTokenAction } from '../../domains/sessionSetUserToken/actions';\n\nimport { Session } from './types';\n\nexport type SessionAction = SessionSetUserTokenAction;\n\nconst initialState: Session = {};\n\nconst reducer: Reducer<Session> = (state = initialState, action: SessionAction) => {\n  switch (action.type) {\n    case 'SESSION.SET_USER_TOKEN':\n      return {\n        ...state,\n        userToken: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport * as reducers from '../state/reducers';\nimport { ApplicationState } from '../state/types';\n\nconst createEnhancedStore = () => {\n  const rootReducer = combineReducers<ApplicationState>({\n    ...reducers,\n  });\n\n  const enhancer = composeWithDevTools();\n\n  return createStore(rootReducer, enhancer);\n};\n\nexport default createEnhancedStore;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { MuiThemeProvider } from '@material-ui/core/styles';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { setContext } from 'apollo-link-context';\nimport { createHttpLink } from 'apollo-link-http';\nimport React from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport theme from 'support/theme';\n\nimport App from './components/App';\nimport { setSessionUserToken } from './data/domains/sessionSetUserToken/actions';\nimport createStore from './data/store/createStore';\nimport registerServiceWorker from './registerServiceWorker';\nimport { getUserToken } from './support/auth';\n\nconst store = createStore();\nconst userToken = getUserToken();\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: userToken ? `Bearer ${userToken}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nif (userToken) {\n  store.dispatch(setSessionUserToken(userToken));\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <MuiThemeProvider theme={theme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </MuiThemeProvider>\n  </ApolloProvider>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","import { Action } from 'redux';\n\nexport interface SessionSetUserTokenAction extends Action {\n  readonly type: 'SESSION.SET_USER_TOKEN';\n  readonly payload: string;\n}\n\nexport const setSessionUserToken = (token: string): SessionSetUserTokenAction => ({\n  type: 'SESSION.SET_USER_TOKEN',\n  payload: token,\n});\n"],"sourceRoot":""}