{"version":3,"sources":["graphql/types/globalTypes.ts","support/theme.ts","data/domains/session/selectors.ts","graphql/queries/getCurrentUserEvents.ts","components/EventActions/NotPlayingButton.tsx","components/EventActions/PlayingButton.tsx","components/EventActions/TentativeButton.tsx","graphql/mutations/saveRsvp.ts","components/EventActions/EventActions.tsx","components/EventActions/hooks.ts","components/Event/Location.tsx","components/Event/styles.ts","components/Event/Subheader.tsx","components/Event/Event.tsx","components/SkeletonEvent/styles.ts","components/SkeletonEvent/SkeletonEvent.tsx","components/EventList/EventList.tsx","components/PageHome/PageHome.tsx","components/Routes/Routes.tsx","components/AppBody/AppBody.tsx","graphql/queries/getUserAvatar.ts","components/UserAvatar/UserAvatar.tsx","components/AppHeader/AppHeader.tsx","support/auth/auth.ts","graphql/mutations/createUserToken.ts","components/Login/Form/SignInButton.tsx","components/Login/Form/hooks.ts","components/Login/Form/Form.tsx","components/Login/styles.ts","components/Login/Login.tsx","components/App/App.tsx","components/App/AppContainer.ts","data/state/session/reducer.ts","data/store/createStore.ts","registerServiceWorker.ts","index.tsx","data/domains/sessionSetUserToken/actions.ts"],"names":["RsvpStatus","createTheme","palette","primary","deepPurple","secondary","purple","isAuthenticated","state","session","userToken","gql","NotPlayingButton","className","isNotPlaying","onRsvp","rsvpCallback","useCallback","NO","icon","color","IconButton","aria-label","onClick","size","PlayingButton","isPlaying","YES","TentativeButton","isTentative","MAYBE","styles","createStyles","fontSize","withStyles","classes","eventId","teamId","rsvpStatus","useMutation","saveEventRsvp","saveRsvp","loading","saveRsvpCallback","variables","useSaveRsvpMutation","CircularProgress","Location","locationName","locationUrl","Typography","component","Link","href","target","rel","card","width","display","flexDirection","justifyContent","Subheader","startTime","fixedTime","dateTime","toString","Intl","DateTimeFormat","navigator","language","dateStyle","timeStyle","format","Date","location","locationMapsUrl","teamPhotoUrl","title","Card","CardHeader","avatar","Avatar","src","subheader","CardContent","CardActions","disableSpacing","maxWidth","skeletonTitle","Skeleton","height","skeletonSubheader","variant","notEmpty","value","undefined","EventList","useQuery","getCurrentUserEvents","data","error","Grid","item","xs","data-testid","events","currentUser","filter","length","map","e","style","id","team","photoThumbnailUrl","name","googleMapsUrl","startTimestamp","viewerRsvpStatus","theme","main","alignItems","margin","spacing","Container","container","Routes","exact","path","PageHome","AppBody","getUserAvatarQuery","profilePhotoThumbnailUrl","menuButton","marginLeft","marginRight","grow","flexGrow","AppBar","position","Toolbar","process","userTokenName","SignInButton","isDisabled","Button","type","fullWidth","preventDefault","disabled","useControlledInput","defaultValue","useState","setValue","onChange","Form","token","submitButtonClassname","formClassname","username","onUsernameChange","password","onPasswordChange","CREATE_USER_TOKEN","createUserToken","onSignInClicked","localStorage","setItem","window","reload","button","FormControl","required","InputLabel","htmlFor","Input","autoComplete","autoFocus","FormControlLabel","control","Checkbox","label","breakpoints","up","paper","marginTop","padding","backgroundColor","form","submit","Paper","App","CssBaseline","connect","initialState","reducer","action","payload","createEnhancedStore","rootReducer","combineReducers","reducers","enhancer","composeWithDevTools","createStore","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","store","getItem","client","ApolloClient","uri","headers","authorization","cache","InMemoryCache","dispatch","ReactDOM","render","ApolloProvider","StyledEngineProvider","injectFirst","ThemeProvider","document","getElementById","URL","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fa83bdba.chunk.js","sourcesContent":["export type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Gets the current user */\n  currentUser: User;\n  /** Get a single event */\n  event?: Maybe<Event>;\n  /** Get events for a team */\n  events: Array<Maybe<Event>>;\n  /** Get teams for a user */\n  teams: Array<Maybe<Team>>;\n};\n\n\nexport type QueryEventArgs = {\n  eventId: Scalars['Int'];\n  teamId: Scalars['Int'];\n};\n\n\nexport type QueryEventsArgs = {\n  teamId: Scalars['Int'];\n};\n\n\nexport type QueryTeamsArgs = {\n  dashboardOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** A user */\nexport type User = {\n  __typename?: 'User';\n  displayName: Scalars['String'];\n  emailAddress1: Scalars['String'];\n  events: Array<Maybe<Event>>;\n  firstName: Scalars['String'];\n  fullName: Scalars['String'];\n  lastName: Scalars['String'];\n  profilePhotoFullUrl: Scalars['String'];\n  profilePhotoSmallUrl: Scalars['String'];\n  profilePhotoThumbnailUrl: Scalars['String'];\n  userId: Scalars['Int'];\n};\n\n\n/** A user */\nexport type UserEventsArgs = {\n  dashboardOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** An event */\nexport type Event = {\n  __typename?: 'Event';\n  endTimestamp?: Maybe<Scalars['Int']>;\n  eventId: Scalars['Int'];\n  eventType: Scalars['String'];\n  location?: Maybe<Location>;\n  seasonId: Scalars['Int'];\n  seasonName?: Maybe<Scalars['String']>;\n  startTimestamp?: Maybe<Scalars['Int']>;\n  status: Scalars['String'];\n  team: Team;\n  title: Scalars['String'];\n  viewerRsvpStatus: RsvpStatus;\n};\n\n/** A location */\nexport type Location = {\n  __typename?: 'Location';\n  address?: Maybe<Scalars['String']>;\n  googleMapsDirectionsUrl?: Maybe<Scalars['String']>;\n  googleMapsUrl?: Maybe<Scalars['String']>;\n  isPublic: Scalars['Boolean'];\n  locationId: Scalars['Int'];\n  name: Scalars['String'];\n};\n\n/** A team */\nexport type Team = {\n  __typename?: 'Team';\n  name: Scalars['String'];\n  photoFullUrl?: Maybe<Scalars['String']>;\n  photoSmallUrl?: Maybe<Scalars['String']>;\n  photoThumbnailUrl?: Maybe<Scalars['String']>;\n  shortName: Scalars['String'];\n  teamId: Scalars['Int'];\n};\n\n/** The RSVP status of a user */\nexport enum RsvpStatus {\n  /** Indicates the user is available to attend */\n  AVAILABLE = 'AVAILABLE',\n  /** Indicates the user might attend */\n  MAYBE = 'MAYBE',\n  /** Indicates the user will not attend */\n  NO = 'NO',\n  /** Indicates the user has not RSVPed */\n  NONE = 'NONE',\n  /** Indicates the user will attend */\n  YES = 'YES'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Create a user token */\n  createUserToken?: Maybe<UserToken>;\n  /** RSVP to an event */\n  saveRsvp: Event;\n};\n\n\nexport type MutationCreateUserTokenArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationSaveRsvpArgs = {\n  comments?: InputMaybe<Scalars['String']>;\n  eventId: Scalars['Int'];\n  rsvpStatus: RsvpStatus;\n  teamId: Scalars['Int'];\n};\n\n/** A user token */\nexport type UserToken = {\n  __typename?: 'UserToken';\n  /** A unique token for the user matched. Tokens are 36-character, lower-cased GUIDs. */\n  token: Scalars['String'];\n};\n","import { createTheme } from '@mui/material/styles';\n\nimport { deepPurple, purple } from '@mui/material/colors';\n\nexport default createTheme({\n  palette: {\n    primary: deepPurple,\n    secondary: purple,\n  },\n});\n","import { ApplicationState } from '../../state/types';\n\nexport type IsAuthenticated = (state: ApplicationState) => boolean;\nexport const isAuthenticated: IsAuthenticated = (state) => !!state.session.userToken;\n","import { gql } from '@apollo/client';\n\nexport default gql`\n  query GetCurrentUserEvents {\n    currentUser {\n      events {\n        id: eventId\n        title\n        endTimestamp\n        startTimestamp\n        viewerRsvpStatus\n        team {\n          id: teamId\n          shortName\n          photoThumbnailUrl\n        }\n        location {\n          name\n          address\n          googleMapsUrl\n        }\n      }\n    }\n  }\n`;\n","import { IconButton } from '@mui/material';\nimport NotPlayingIcon from '@mui/icons-material/HighlightOff';\nimport RsvpedNotPlayingIcon from '@mui/icons-material/HighlightOffTwoTone';\nimport { FC, useCallback } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ninterface NotPlayingButtonProps {\n  readonly isNotPlaying: boolean;\n  readonly className: string;\n  onRsvp(rsvpStatus: RsvpStatus): void;\n}\n\nconst NotPlayingButton: FC<NotPlayingButtonProps> = ({ className, isNotPlaying, onRsvp }) => {\n  const rsvpCallback = useCallback(() => {\n    onRsvp(RsvpStatus.NO);\n  }, [onRsvp]);\n\n  const icon = isNotPlaying ? (\n    <RsvpedNotPlayingIcon className={className} color=\"primary\" />\n  ) : (\n    <NotPlayingIcon className={className} />\n  );\n\n  return (\n    <IconButton aria-label=\"Not Playing\" onClick={rsvpCallback} size=\"large\">\n      {icon}\n    </IconButton>\n  );\n};\n\nexport default NotPlayingButton;\n","import { IconButton } from '@mui/material';\nimport PlayingIcon from '@mui/icons-material/CheckCircleOutline';\nimport RsvpedPlayingIcon from '@mui/icons-material/CheckCircleTwoTone';\nimport { FC, useCallback } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ninterface PlayingButtonProps {\n  readonly isPlaying: boolean;\n  readonly className: string;\n  onRsvp(rsvpStatus: RsvpStatus): void;\n}\n\nconst PlayingButton: FC<PlayingButtonProps> = ({ isPlaying, className, onRsvp }) => {\n  const rsvpCallback = useCallback(() => {\n    onRsvp(RsvpStatus.YES);\n  }, [onRsvp]);\n  const icon = isPlaying ? (\n    <RsvpedPlayingIcon className={className} color=\"primary\" />\n  ) : (\n    <PlayingIcon className={className} />\n  );\n\n  return (\n    <IconButton aria-label=\"Playing\" onClick={rsvpCallback} size=\"large\">\n      {icon}\n    </IconButton>\n  );\n};\n\nexport default PlayingButton;\n","import { IconButton } from '@mui/material';\nimport TentativeIcon from '@mui/icons-material/HelpOutlineOutlined';\nimport RsvpedTentativeIcon from '@mui/icons-material/HelpTwoTone';\nimport { FC, useCallback } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\ninterface TentativeButtonProps {\n  readonly isTentative: boolean;\n  readonly className: string;\n  onRsvp(rsvpStatus: RsvpStatus): void;\n}\n\nconst TentativeButton: FC<TentativeButtonProps> = ({ onRsvp, className, isTentative }) => {\n  const rsvpCallback = useCallback(() => {\n    onRsvp(RsvpStatus.MAYBE);\n  }, [onRsvp]);\n\n  const icon = isTentative ? (\n    <RsvpedTentativeIcon className={className} color=\"primary\" />\n  ) : (\n    <TentativeIcon className={className} />\n  );\n  return (\n    <IconButton aria-label=\"Tentative\" onClick={rsvpCallback} size=\"large\">\n      {icon}\n    </IconButton>\n  );\n};\n\nexport default TentativeButton;\n","import { gql } from '@apollo/client';\n\nexport default gql`\n  mutation SaveEventRsvp($eventId: Int!, $rsvpStatus: RsvpStatus!, $teamId: Int!, $comments: String) {\n    saveRsvp(comments: $comments, eventId: $eventId, rsvpStatus: $rsvpStatus, teamId: $teamId) {\n      id: eventId\n      viewerRsvpStatus\n    }\n  }\n`;\n","import { CircularProgress } from '@mui/material';\nimport { WithStyles } from '@mui/styles';\nimport createStyles from '@mui/styles/createStyles';\nimport withStyles from '@mui/styles/withStyles';\nimport { FC } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\n\nimport NotPlayingButton from './NotPlayingButton';\nimport PlayingButton from './PlayingButton';\nimport TentativeButton from './TentativeButton';\nimport { useSaveRsvpMutation } from './hooks';\n\ninterface OwnProps {\n  readonly eventId: number;\n  readonly rsvpStatus: RsvpStatus;\n  readonly teamId: number;\n}\n\nconst styles = createStyles({\n  icon: {\n    fontSize: 30,\n  },\n});\n\ntype EventActionsProps = WithStyles<typeof styles> & OwnProps;\n\nexport const EventActions: FC<EventActionsProps> = ({ classes, eventId, teamId, rsvpStatus }) => {\n  const { loading, saveRsvpCallback } = useSaveRsvpMutation({ teamId, eventId });\n\n  if (loading) {\n    return <CircularProgress className={classes.icon} color=\"secondary\" />;\n  }\n\n  return (\n    <>\n      <PlayingButton className={classes.icon} isPlaying={rsvpStatus === RsvpStatus.YES} onRsvp={saveRsvpCallback} />\n      <TentativeButton\n        className={classes.icon}\n        isTentative={rsvpStatus === RsvpStatus.MAYBE}\n        onRsvp={saveRsvpCallback}\n      />\n      <NotPlayingButton\n        className={classes.icon}\n        isNotPlaying={rsvpStatus === RsvpStatus.NO}\n        onRsvp={saveRsvpCallback}\n      />\n    </>\n  );\n};\n\nexport default withStyles(styles)(EventActions);\n","import { useCallback } from 'react';\n\nimport saveEventRsvp from '../../graphql/mutations/saveRsvp';\nimport { SaveEventRsvpMutation, SaveEventRsvpMutationVariables } from '../../graphql/types/saveRsvp';\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\nimport { useMutation } from '@apollo/client';\n\ntype SaveRsvpCallback = (rsvpStatus: RsvpStatus) => void;\n\ninterface SaveRsvpMutation {\n  readonly loading: boolean;\n  readonly saveRsvpCallback: SaveRsvpCallback;\n}\n\ninterface UseSaveRsvpMutationOptions {\n  readonly eventId: number;\n  readonly teamId: number;\n}\n\ntype UseSaveRsvpMutation = (options: UseSaveRsvpMutationOptions) => SaveRsvpMutation;\nexport const useSaveRsvpMutation: UseSaveRsvpMutation = ({ eventId, teamId }) => {\n  const [saveRsvp, { loading }] = useMutation<SaveEventRsvpMutation, SaveEventRsvpMutationVariables>(saveEventRsvp);\n  const saveRsvpCallback = useCallback(\n    (rsvpStatus) => {\n      saveRsvp({ variables: { eventId, teamId, rsvpStatus } });\n    },\n    [eventId, teamId, saveRsvp]\n  );\n\n  return {\n    loading,\n    saveRsvpCallback,\n  };\n};\n","import Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport { FC } from 'react';\n\ninterface LocationProps {\n  readonly locationName: string;\n  readonly locationUrl?: string;\n}\n\nexport const Location: FC<LocationProps> = ({ locationName, locationUrl }) => {\n  if (!locationUrl) {\n    <Typography component=\"p\">{locationName}</Typography>;\n  }\n\n  return (\n    <Typography component=\"p\">\n      <Link href={locationUrl} target=\"_blank\" rel=\"noreferrer\">\n        {locationName}\n      </Link>\n    </Typography>\n  );\n};\n","import createStyles from '@mui/styles/createStyles';\n\nconst styles = (): ReturnType<typeof createStyles> =>\n  createStyles({\n    card: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n    },\n  });\n\nexport default styles;\n","import { FC } from 'react';\n\nexport type SubheaderProps = {\n  readonly startTime?: number;\n};\n\nexport const Subheader: FC<SubheaderProps> = ({ startTime }) => {\n  if (!startTime) {\n    return null;\n  }\n\n  // TODO: fix this on the server\n  // the server sends timestamps that are\n  // SECONDS since epoch, not MILLISECONDS\n  // so we must convert to ms until ther\n  // server is fixed.\n  const fixedTime = startTime * 1000;\n\n  return (\n    <time dateTime={fixedTime.toString()}>\n      {new Intl.DateTimeFormat(navigator.language, { dateStyle: 'full', timeStyle: 'short' }).format(\n        new Date(fixedTime)\n      )}\n    </time>\n  );\n};\n","import { Avatar, CardActions, CardContent, CardHeader } from '@mui/material';\nimport { WithStyles } from '@mui/styles';\nimport withStyles from '@mui/styles/withStyles';\nimport Card from '@mui/material/Card';\nimport { FC } from 'react';\n\nimport { RsvpStatus } from '../../graphql/types/globalTypes';\nimport EventActions from '../EventActions';\n\nimport { Location } from './Location';\nimport styles from './styles';\nimport { Subheader } from './Subheader';\n\nexport interface OwnProps {\n  readonly eventId: number;\n  readonly location: string;\n  readonly locationMapsUrl?: string;\n  readonly rsvpStatus: RsvpStatus;\n  readonly startTime?: number;\n  readonly teamId: number;\n  readonly teamPhotoUrl: string | null;\n  readonly title: string;\n}\n\nexport type EventProps = WithStyles<typeof styles> & OwnProps;\n\nexport const Event: FC<EventProps> = ({\n  classes,\n  eventId,\n  location,\n  locationMapsUrl,\n  rsvpStatus,\n  startTime,\n  teamId,\n  teamPhotoUrl,\n  title,\n}) => {\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={<Avatar aria-label=\"teamPhoto\" src={teamPhotoUrl ?? ''} />}\n        title={title}\n        subheader={<Subheader startTime={startTime} />}\n      />\n      <CardContent>\n        <Location locationName={location} locationUrl={locationMapsUrl} />\n      </CardContent>\n      <CardActions disableSpacing>\n        <EventActions rsvpStatus={rsvpStatus} teamId={teamId} eventId={eventId} />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withStyles(styles)(Event);\n","import createStyles from '@mui/styles/createStyles';\n\nconst styles = (): ReturnType<typeof createStyles> =>\n  createStyles({\n    card: {\n      maxWidth: 354,\n      width: '100%',\n    },\n  });\n\nexport default styles;\n","import Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport IconButton from '@mui/material/IconButton';\nimport { WithStyles } from '@mui/styles';\nimport withStyles from '@mui/styles/withStyles';\nimport Skeleton from '@mui/material/Skeleton';\nimport { FC } from 'react';\n\nimport styles from './styles';\n\ntype SkeletonEventProps = WithStyles<typeof styles>;\n\nexport const SkeletonEvent: FC<SkeletonEventProps> = ({ classes }) => {\n  const { card } = classes;\n\n  const skeletonTitle = <Skeleton height={6} />;\n  const skeletonSubheader = <Skeleton height={6} width=\"80%\" />;\n\n  return (\n    <Card className={card}>\n      <CardHeader\n        avatar={<Skeleton variant=\"circular\" width={40} height={40} />}\n        title={skeletonTitle}\n        subheader={skeletonSubheader}\n      />\n      <CardContent>\n        <Skeleton variant=\"rectangular\" height={50} />\n      </CardContent>\n      <CardActions>\n        <IconButton size=\"large\">\n          <Skeleton variant=\"rectangular\" />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withStyles(styles)(SkeletonEvent);\n","import { useQuery } from '@apollo/client';\nimport { Grid } from '@mui/material';\nimport { FC } from 'react';\n\nimport getCurrentUserEvents from '../../graphql/queries/getCurrentUserEvents';\nimport { GetCurrentUserEventsQuery } from '../../graphql/types/getCurrentUserEvents';\nimport Event from '../Event';\nimport SkeletonEvent from '../SkeletonEvent';\n\nfunction notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined;\n}\n\nconst EventList: FC = () => {\n  const { loading, data, error } = useQuery<GetCurrentUserEventsQuery>(getCurrentUserEvents);\n\n  if (loading) {\n    return (\n      <>\n        <Grid item xs={4} data-testid=\"skeleton-event-1\">\n          <SkeletonEvent />\n        </Grid>\n        <Grid item xs={4}>\n          <SkeletonEvent />\n        </Grid>\n        <Grid item xs={4}>\n          <SkeletonEvent />\n        </Grid>\n      </>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <Grid item xs={8}>\n        Some error\n      </Grid>\n    );\n  }\n\n  const { currentUser } = data;\n\n  const events = currentUser.events.filter(notEmpty);\n\n  if (events.length > 0) {\n    return (\n      <>\n        {events.map((e) => (\n          <article key={e.id}>\n            <Grid item xs={6} style={{ display: 'flex' }}>\n              <Event\n                eventId={e.id}\n                teamId={e.team.id}\n                title={e.title}\n                teamPhotoUrl={e.team.photoThumbnailUrl ?? null}\n                location={e.location ? e.location.name : ''}\n                locationMapsUrl={e.location?.googleMapsUrl ?? undefined}\n                startTime={e.startTimestamp ?? undefined}\n                rsvpStatus={e.viewerRsvpStatus}\n              />\n            </Grid>\n          </article>\n        ))}\n      </>\n    );\n  }\n\n  return <>No events scheduled</>;\n};\n\nexport default EventList;\n","import { Theme, Grid, Typography, Container } from '@mui/material';\nimport { WithStyles } from '@mui/styles';\nimport createStyles from '@mui/styles/createStyles';\nimport withStyles from '@mui/styles/withStyles';\nimport { FC } from 'react';\n\nimport EventList from '../EventList';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    main: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      margin: theme.spacing(2),\n    },\n  });\n\nexport type PageHomeProps = WithStyles<typeof styles>;\n\nexport const PageHome: FC<PageHomeProps> = ({ classes }) => {\n  return (\n    <Container maxWidth=\"md\">\n      <Typography variant=\"h3\" className={classes.main}>\n        Events\n      </Typography>\n      <Grid container spacing={2}>\n        <EventList />\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withStyles(styles)(PageHome);\n","import { FC } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport PageHome from '../PageHome';\n\nconst Routes: FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact={true} path=\"/\" component={PageHome} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","import { FC } from 'react';\n\nimport Routes from '../Routes';\n\nconst AppBody: FC = () => <Routes />;\n\nexport default AppBody;\n","import { gql } from '@apollo/client';\n\nexport default gql`\n  query GetUserAvatar {\n    currentUser {\n      profilePhotoThumbnailUrl\n    }\n  }\n`;\n","import { useQuery } from '@apollo/client';\nimport { Avatar, CircularProgress } from '@mui/material';\nimport { WithStyles } from '@mui/styles';\nimport createStyles from '@mui/styles/createStyles';\nimport withStyles from '@mui/styles/withStyles';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport { FC } from 'react';\n\nimport getUserAvatarQuery from '../../graphql/queries/getUserAvatar';\nimport { GetUserAvatarQuery } from '../../graphql/types/getUserAvatar';\n\nconst styles = createStyles({\n  avatar: {\n    margin: 10,\n  },\n});\n\nexport type UserAvatarProps = WithStyles<typeof styles>;\n\nconst UserAvatar: FC<UserAvatarProps> = ({ classes }) => {\n  const { loading, data } = useQuery<GetUserAvatarQuery>(getUserAvatarQuery);\n\n  if (loading) {\n    return <CircularProgress color=\"secondary\" />;\n  }\n\n  if (data && data.currentUser) {\n    return <Avatar src={data.currentUser.profilePhotoThumbnailUrl} className={classes.avatar} />;\n  }\n\n  return <AccountCircle data-testid=\"avatar-placeholder\" />;\n};\n\nexport default withStyles(styles)(UserAvatar);\n","import { Typography } from '@mui/material';\nimport AppBar from '@mui/material/AppBar';\nimport IconButton from '@mui/material/IconButton';\nimport Toolbar from '@mui/material/Toolbar';\nimport { WithStyles } from '@mui/styles';\nimport createStyles from '@mui/styles/createStyles';\nimport withStyles from '@mui/styles/withStyles';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { FC } from 'react';\n\nimport UserAvatar from '../UserAvatar';\n\nconst styles = createStyles({\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport const AppHeader: FC<WithStyles<typeof styles>> = ({ classes }) => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"Menu\"\n          size=\"large\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {process.env.REACT_APP_WEBSITE_NAME}\n        </Typography>\n        <UserAvatar />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default withStyles(styles)(AppHeader);\n","const userTokenName = 'userToken';\n\nexport type GetUserToken = () => string | null;\nexport const getUserToken: GetUserToken = () => {\n  return localStorage.getItem(userTokenName);\n};\n\nexport type SetUserToken = (token: string) => void;\nexport const setUserToken: SetUserToken = (token) => localStorage.setItem(userTokenName, token);\n","import { gql } from '@apollo/client';\n\nexport default gql`\n  mutation CreateUserToken($username: String!, $password: String!) {\n    createUserToken(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n","import { Button } from '@mui/material';\nimport { FC } from 'react';\n\ninterface SignInButtonProps {\n  readonly className: string;\n  readonly isDisabled: boolean;\n  onClick(): void;\n}\n\nconst SignInButton: FC<SignInButtonProps> = ({ className, isDisabled, onClick }) => {\n  return (\n    <Button\n      type=\"submit\"\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      className={className}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick();\n      }}\n      disabled={isDisabled}\n    >\n      Sign in\n    </Button>\n  );\n};\n\nexport default SignInButton;\n","import { useCallback, useState } from 'react';\n\nexport interface ControlledInput {\n  readonly value: string;\n  onChange: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n}\ntype UseControlledInput = (defaultValue: string) => ControlledInput;\nexport const useControlledInput: UseControlledInput = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const onChange = useCallback<React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>>((e) => {\n    setValue(e.target.value);\n  }, []);\n\n  return {\n    value,\n    onChange,\n  };\n};\n","import { useMutation } from '@apollo/client';\nimport { Checkbox, CircularProgress, FormControl, FormControlLabel, Input, InputLabel } from '@mui/material';\nimport { FC, useCallback } from 'react';\nimport { setUserToken } from 'support/auth';\n\nimport CREATE_USER_TOKEN from '../../../graphql/mutations/createUserToken';\nimport { CreateUserTokenMutation, CreateUserTokenMutationVariables } from '../../../graphql/types/createUserToken';\n\nimport SignInButton from './SignInButton';\nimport { useControlledInput } from './hooks';\n\nexport interface FormProps {\n  readonly formClassname: string;\n  readonly submitButtonClassname: string;\n}\n\nconst Form: FC<FormProps> = ({ submitButtonClassname, formClassname }) => {\n  const { value: username, onChange: onUsernameChange } = useControlledInput('');\n  const { value: password, onChange: onPasswordChange } = useControlledInput('');\n  const [createUserToken, { data, error, loading }] = useMutation<\n    CreateUserTokenMutation,\n    CreateUserTokenMutationVariables\n  >(CREATE_USER_TOKEN);\n\n  const onSignInClicked = useCallback(() => {\n    createUserToken({ variables: { username, password } });\n  }, [createUserToken, username, password]);\n\n  if (data && data.createUserToken) {\n    setUserToken(data.createUserToken.token);\n    window.location.reload();\n  }\n\n  const button = loading ? (\n    <CircularProgress color=\"secondary\" />\n  ) : (\n    <SignInButton onClick={onSignInClicked} isDisabled={!username || !password} className={submitButtonClassname} />\n  );\n\n  return (\n    <div className={formClassname}>\n      <FormControl margin=\"normal\" required fullWidth error={!!error}>\n        <InputLabel htmlFor=\"username\">Username</InputLabel>\n        <Input\n          id=\"username\"\n          name=\"username\"\n          autoComplete=\"username\"\n          autoFocus={true}\n          value={username}\n          onChange={onUsernameChange}\n        />\n      </FormControl>\n      <FormControl margin=\"normal\" required fullWidth error={!!error}>\n        <InputLabel htmlFor=\"password\">Password</InputLabel>\n        <Input\n          name=\"password\"\n          type=\"password\"\n          id=\"password\"\n          autoComplete=\"current-password\"\n          value={password}\n          onChange={onPasswordChange}\n          data-testid=\"password-textbox\"\n        />\n      </FormControl>\n      <FormControlLabel control={<Checkbox value=\"remember\" color=\"primary\" />} label=\"Remember me\" />\n      {button}\n    </div>\n  );\n};\n\nexport default Form;\n","import { Theme } from '@mui/material';\n\nimport createStyles from '@mui/styles/createStyles';\n\nconst styles = (theme: Theme): ReturnType<typeof createStyles> =>\n  createStyles({\n    main: {\n      width: 'auto',\n      display: 'block', // Fix IE 11 issue.\n      marginLeft: theme.spacing(3),\n      marginRight: theme.spacing(3),\n      [theme.breakpoints.up('sm')]: {\n        width: 552,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      },\n    },\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: `${theme.spacing(2)} ${theme.spacing(3)} ${theme.spacing(3)}`,\n    },\n    avatar: {\n      margin: theme.spacing(),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(),\n    },\n    submit: {\n      marginTop: theme.spacing(3),\n    },\n  });\n\nexport default styles;\n","import { Avatar, Paper, Typography } from '@mui/material';\nimport { WithStyles } from '@mui/styles';\nimport withStyles from '@mui/styles/withStyles';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { FC } from 'react';\n\nimport Form from './Form';\nimport styles from './styles';\n\nexport const Login: FC<WithStyles<typeof styles>> = ({ classes }) => {\n  return (\n    <div className={classes.main}>\n      <Paper className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <Form formClassname={classes.form} submitButtonClassname={classes.submit} />\n      </Paper>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Login);\n","import CssBaseline from '@mui/material/CssBaseline';\nimport { FC } from 'react';\n\nimport AppBody from '../AppBody';\nimport AppHeader from '../AppHeader';\nimport Login from '../Login';\n\nexport interface MappedStateProps {\n  readonly isAuthenticated: boolean;\n}\n\nexport type AppProps = MappedStateProps;\n\nconst App: FC<AppProps> = ({ isAuthenticated }) => {\n  return (\n    <div>\n      <CssBaseline />\n      <AppHeader />\n      {isAuthenticated ? <AppBody /> : <Login />}\n    </div>\n  );\n};\n\nexport default App;\n","import { MapStateToProps, connect } from 'react-redux';\n\nimport { isAuthenticated } from '../../data/domains/session/selectors';\nimport { ApplicationState } from '../../data/state/types';\n\nimport App, { MappedStateProps } from './App';\n\nexport const mapStateToProps: MapStateToProps<MappedStateProps, Record<string, never>, ApplicationState> = (state) => {\n  return {\n    isAuthenticated: isAuthenticated(state),\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import { Reducer } from 'redux';\n\nimport { SessionSetUserTokenAction } from '../../domains/sessionSetUserToken/actions';\n\nimport { Session } from './types';\n\nexport type SessionAction = SessionSetUserTokenAction;\n\nconst initialState: Session = {};\n\nconst reducer: Reducer<Session> = (state = initialState, action: SessionAction) => {\n  switch (action.type) {\n    case 'SESSION.SET_USER_TOKEN':\n      return {\n        ...state,\n        userToken: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { Store, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport * as reducers from '../state/reducers';\nimport { ApplicationState } from '../state/types';\n\nconst createEnhancedStore = (): Store<ApplicationState> => {\n  const rootReducer = combineReducers<ApplicationState>({\n    ...reducers,\n  });\n\n  const enhancer = composeWithDevTools();\n\n  return createStore(rootReducer, enhancer);\n};\n\nexport default createEnhancedStore;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport theme from 'support/theme';\n\nimport App from './components/App';\nimport { setSessionUserToken } from './data/domains/sessionSetUserToken/actions';\nimport createStore from './data/store/createStore';\nimport registerServiceWorker from './registerServiceWorker';\nimport { getUserToken } from './support/auth';\n\nconst store = createStore();\nconst userToken = getUserToken();\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  headers: {\n    authorization: userToken ? `Bearer ${userToken}` : '',\n  },\n  cache: new InMemoryCache(),\n});\n\nif (userToken) {\n  store.dispatch(setSessionUserToken(userToken));\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  </ApolloProvider>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","import { Action } from 'redux';\n\nexport interface SessionSetUserTokenAction extends Action {\n  readonly type: 'SESSION.SET_USER_TOKEN';\n  readonly payload: string;\n}\n\nexport const setSessionUserToken = (token: string): SessionSetUserTokenAction => ({\n  type: 'SESSION.SET_USER_TOKEN',\n  payload: token,\n});\n"],"sourceRoot":""}